#!/usr/bin/python3

'''
Analyze a page access trace (PAT) file.
'''

import sys
from sys import float_info
import argparse
from os import path
import pat
import plot
import metisgraph

###############################################################################
# Parsing
###############################################################################

def parseArguments():
    parser = argparse.ArgumentParser(
        description="Run various analyses on page access trace (PAT) files.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    config = parser.add_argument_group("Configuration Options")
    config.add_argument("-i", "--input", type=str, required=True,
                        help="Input page access trace file")
    config.add_argument("-s", "--start", type=float, default=-1.0,
            help="Only analyze trace entries with timestamps after this time")
    config.add_argument("-e", "--end", type=float, default=float_info.max,
            help="Only analyze trace entries with timestamps before this time")
    config.add_argument("-v", "--verbose", action="store_true",
                        help="Print status updates & verbose files")

    placement = parser.add_argument_group("Thread Placement Options")
    placement.add_argument("-p", "--partition", action="store_true",
        help="Run the graph partitioning algorithm to place threads")
    placement.add_argument("--nodes", type=int, default=1,
        help="Number of nodes over which to distribute threads")
    placement.add_argument("--gpmetis", type=str, default="gpmetis",
        help="Location of the 'gpmetis' graph partitioning executable")
    placement.add_argument("--save-partition", action="store_true",
        help="Save intermediate files generated by partitioning process")

    plot = parser.add_argument_group("Plotting Options")
    plot.add_argument("-t", "--trend", action="store_true",
        help="Plot frequencies of page faults over time")
    plot.add_argument("--per-thread", action="store_true",
        help="Plot per-thread page fault frequencies, requires -t/--trend")
    plot.add_argument("--save-plot", type=str,
        help="If specified, save the plot to file")
    plot.add_argument("--chunks", type=int, default=100,
        help="Number of chunks into which to divide the application")

    # TODO get binaries, add option to dump which symbols cause most page faults

    return parser.parse_args()

def sanityCheck(args):
    args.input = path.abspath(args.input)
    assert path.isfile(args.input), \
        "Invalid page access trace file '{}'".format(args.input)
    assert args.start < args.end, \
        "Start time must be smaller than end time (start: {}, end: {})" \
        .format(args.start, args.end)

    if args.partition:
        assert args.nodes >= 1, \
            "Number of nodes must be >= 1 ({})".format(args.nodes)

    if args.trend:
        assert args.chunks > 0, \
            "Number of chunks must be >= 1 ({})".format(args.chunks)

###############################################################################
# Driver
###############################################################################

if __name__ == "__main__":
    args = parseArguments()
    sanityCheck(args)

    if args.partition:
        graph = pat.parsePATtoGraph(args.input, args.start, args.end,
                                    args.verbose)
        metisgraph.placeThreads(graph, args.nodes, args.gpmetis,
                                args.save_partition, args.verbose)

    if args.trend:
        chunks, ranges = pat.parsePATtoTrendline(args.input, args.start,
                                                 args.end, args.chunks,
                                                 args.per_thread, args.verbose)
        plot.plotPageAccessFrequency(chunks, ranges, args.per_thread,
                                     args.save_plot)

