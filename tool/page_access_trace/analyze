#!/usr/bin/python3

''' Analyze a page access trace (PAT) file. '''

import sys
from sys import float_info
import argparse
import os
from os import path

import dwarf
import pat
import plot
import symtab
import metisgraph

###############################################################################
# Parsing
###############################################################################

def parseArguments():
    parser = argparse.ArgumentParser(
        description="Run various analyses on page access trace (PAT) files.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    config = parser.add_argument_group("Configuration Options")
    config.add_argument("-i", "--input", type=str, required=True,
            help="Input page access trace file")
    config.add_argument("-b", "--binary", type=str,
            help="Binary used to generate the trace")
    config.add_argument("-v", "--verbose", action="store_true",
            help="Print status updates & verbose files")

    filt = parser.add_argument_group("Page Fault Filtering Options")
    filt.add_argument("-s", "--start", type=float, default=-1.0,
            help="Only analyze trace entries with timestamps after this time")
    filt.add_argument("-e", "--end", type=float, default=float_info.max,
            help="Only analyze trace entries with timestamps before this time")
    filt.add_argument("--no-code", action="store_true",
            help="Ignore code page faults - requires -b/--binary")
    filt.add_argument("--no-data", action="store_true",
            help="Ignore data page faults - requires -b/--binary")
    filt.add_argument("-n", "--nodes", type=str, default=None,
            help="Only parse faults from nodes in the specified " \
                 "comma-separated list")
    filt.add_argument("--pages", action="store_true",
            help="Only parse faults from pages in the specified " \
                "comma-separated list")
    filt.add_argument("--regions", type=str, default=None,
            help="Only parse regions in the specified comma-separated list")
    # TODO filter by thread
    # TODO filter by access type

    placement = parser.add_argument_group("Thread Placement Options")
    placement.add_argument("-p", "--partition", action="store_true",
            help="Run the graph partitioning algorithm to place threads")
    placement.add_argument("--graph-type", choices=["raw", "interference"],
            help="Partition based on raw TID <-> page mappings or based on " \
                 "a TID interference graph",
            default="interference",)
    placement.add_argument("--num-nodes", type=int, default=2,
            help="Number of nodes over which to distribute threads")
    placement.add_argument("--metis", type=str, default="/usr/local/metis/bin",
            help="Location of the METIS graph partitioning executables")
    placement.add_argument("--tid-map", type=str,
            help="File containing Linux TID -> userspace mapping")
    placement.add_argument("--schedule", type=str,
            default="thread-schedule.txt", help="Thread schedule output file")
    placement.add_argument("--save-partition", action="store_true",
            help="Save intermediate files generated by partitioning process")

    plot = parser.add_argument_group("Plotting Options")
    plot.add_argument("-t", "--trend", action="store_true",
            help="Plot frequencies of page faults over time")
    plot.add_argument("--chunks", type=int, default=100,
            help="Number of chunks into which to divide the application")
    plot.add_argument("--per-thread", action="store_true",
            help="Plot per-thread page fault frequencies - requires -t/--trend")
    plot.add_argument("--save-plot", type=str,
            help="If specified, save the plot to file")

    problemsym = parser.add_argument_group(
            "Per-symbol Fault Options (requires -b/--binary)")
    problemsym.add_argument("-d", "--data", action="store_true",
            help="List memory objects that cause the most faults")
    problemsym.add_argument("-l", "--locations", action="store_true",
            help="List program locations with the most faults")
    problemsym.add_argument("-f", "--false-sharing", action="store_true",
            help="List memory objects that induce false-sharing across nodes")
    problemsym.add_argument("--at-loc", type=str, default=None,
            help="List pages that cause the most faults at a file:line " \
                 "location, e.g., 'myfile.c:103'")
    problemsym.add_argument("--num", type=int, default=10,
            help="Number of symbols (-d), locations (-l) or pages (-f) to list")

    return parser.parse_args()

def sanityCheck(args):
    args.input = path.abspath(args.input)
    assert path.isfile(args.input), \
        "Invalid page access trace file '{}'".format(args.input)

    if args.binary != None:
        args.binary = path.abspath(args.binary)
        assert path.isfile(args.binary), \
            "Binary '{}' doesn't exist".format(args.binary)
    elif args.no_code or args.no_data:
        print("WARNING: cannot filter code or data faults without binary")
        args.no_code = False
        args.no_data = False

    assert args.start < args.end, \
        "Start time must be smaller than end time (start: {}, end: {})" \
        .format(args.start, args.end)

    if args.partition:
        assert args.num_nodes > 1, \
            "Number of nodes must be > 1 ({})".format(args.num_nodes)
        args.metis = path.abspath(args.metis)
        assert path.isdir(args.metis), \
            "Invalid METIS executable directory '{}'".format(args.metis)
        if args.tid_map != None: args.tid_map = path.abspath(args.tid_map)

    if args.trend:
        assert args.chunks >= 1, \
            "Number of chunks must be >= 1 ({})".format(args.chunks)

    if args.data or args.locations or args.false_sharing or args.at_loc:
        assert args.binary, "Must specify a binary for -d/-l/-f/--at-loc"
        assert args.num > 0, \
            "Number of symbols must be >= 1 ({})".format(args.num)

###############################################################################
# Driver
###############################################################################

if __name__ == "__main__":
    args = parseArguments()
    sanityCheck(args)

    # Instantiate objects needed for parsing & analysis
    if args.binary:
        symbolTable = symtab.SymbolTable(args.binary, args.verbose)
        dwarfInfo = dwarf.DwarfInfo(args.binary)
    else:
        symbolTable = None
        dwarfInfo = None
    config = pat.ParseConfig(args.start, args.end, symbolTable, dwarfInfo,
                             args.no_code, args.no_data, args.nodes,
                             args.pages, args.regions)

    if args.partition:
        graphs = pat.parsePATtoGraphs(args.input, args.graph_type,
                                      config, args.verbose)
        if os.path.isfile(args.schedule): os.remove(args.schedule)
        for region in graphs:
            metisgraph.placeThreads(graphs[region], region, args.num_nodes,
                                    args.tid_map, args.metis, args.schedule,
                                    args.save_partition, args.verbose)

    if args.trend:
        chunks, ranges = pat.parsePATtoTrendline(args.input, config,
                                                 args.chunks, args.per_thread,
                                                 args.verbose)
        plot.plotPageAccessFrequency(chunks, ranges, args.per_thread,
                                     args.save_plot)

    if args.data:
        sortedSyms = \
            pat.parsePATforProblemSymbols(args.input, config, args.verbose)
        print("\n{:^30} | Number of Accesses | {:^10}/{:^10}/{:^10}" \
              .format("Program Object", "R", "W", "I"))
        print("{:-<30}-|--------------------|-{:-<32}".format("-", "-"))
        for sym in sortedSyms[:args.num]:
            print(" {:<29} | {:^18} | {:^10} {:^10} {:^10}" \
                  .format(sym[0], sym[1], sym[2][0], sym[2][1], sym[2][2]))

    if args.locations:
        locations = pat.parsePATforFaultLocs(args.input, config, args.verbose)
        print("\n{:^30} | Number of faults | {:^10}/{:^10}/{:^10}" \
              .format("Location", "R", "W", "I"))
        print("{:-<30}-|------------------|-{:-<32}".format("-", "-"))
        for loc in locations[:args.num]:
            print(" {:29} | {:^16} | {:^10} {:^10} {:^10}" \
                  .format(loc[0], loc[1], loc[2][0], loc[2][1], loc[2][2]))

    if args.false_sharing:
        pageFaultObjs = pat.parsePATforFalseSharing(args.input, config,
                                                    args.verbose)
        end = min(args.num - 1, len(pageFaultObjs) - 1)
        while end >= 0 and pageFaultObjs[end].falseFaults == 0: end -= 1
        if end >= 0:
            trimmed = pageFaultObjs[:end+1]

            print("\n{:>12} | False faults".format("Page"))
            print("{:->12}-|-------------".format("-"))
            for page in trimmed:
                print("{:>12x} | {} ".format(page.page, page.falseFaults))
            print()

            for page in trimmed:
                print("Interfering symbols on page {:x}:".format(page.page))
                for sym in page.problemSymbols: print(sym)
                print()
        else: print("Didn't detect any false sharing!")

    if args.at_loc:
        pagesAtLoc, num = pat.parsePATforPageFaultAtLoc(args.input, config,
                                                        args.at_loc,
                                                        args.verbose)
        if num:
            print("Number of faults at {}: {}".format(args.at_loc, num));
            print("Pages causing faults:")
            for loc in pagesAtLoc[:args.num]:
                print("{:>12x} {}".format(loc[0], loc[1]))
        else:
            print("No pages at location '{}' -- was the binary built with " \
                  "DWARF debugging information?".format(args.at_loc))

