/*
 * The public API for the stack transformation runtime.
 *
 * Author: Rob Lyerly <rlyerly@vt.edu>
 * Date: 10/23/2015
 */

#ifndef _ST_H
#define _ST_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef CHAMELEON

/* Architecture-specific utilities for accessing registers */
#include <arch/aarch64/regs.h>
#include <arch/powerpc64/regs.h>
#include <arch/x86_64/regs.h>

#include "arch.h"

#endif /* CHAMELEON */

/* Handle containing per-binary rewriting information */
typedef struct _st_handle* st_handle;

/* Thread stack bounds */
typedef struct stack_bounds {
  void* high;
  void* low;
} stack_bounds;

///////////////////////////////////////////////////////////////////////////////
// Initialization & teardown
///////////////////////////////////////////////////////////////////////////////

/* 
 * Open the ELF file named by FN & prep it to be used for rewriting.  The
 * handle returned from the function will be used in stack transformation
 * functions to provide information about the specified binary.
 *
 * @param fn the filename for the ELF file
 * @return a stack transformation handle on success, or NULL otherwise
 */
st_handle st_init(const char* fn);

/*
 * Clean up and free a stack transformation handle.  Releases ELF information.
 *
 * @param handle a stack transformation handle
 */
void st_destroy(st_handle handle);

///////////////////////////////////////////////////////////////////////////////
// Performing stack transformation
///////////////////////////////////////////////////////////////////////////////

#ifdef CHAMELEON

/* Information describing randomized location of a stack slot. */
typedef struct slotmap {
  int original, randomized;
  uint32_t size, alignment;
} slotmap;

typedef struct func_rand_info {
  /* Did we find randomization information? */
  int found;

  /* Old (randomized) and new (re-randomized) stack size */
  uint64_t old_frame_size, new_frame_size;

  /*
   * Slot re-mapping information from original to new slot locations.  There
   * are two sets of slot-remappings - one for the previously randomized code
   * (in which the stack is currently encoded) and one for the newly randomized
   * code.
   */
  uint64_t num_old_slots;
  const slotmap *old_rand_slots;
  uint64_t num_new_slots;
  const slotmap *new_rand_slots;
} func_rand_info;

/*
 * Get randomization information for a given function.
 *
 * @param handle an opaque handle provided by chameleon
 * @param addr a function address
 * @return function randomization information for the function containing addr
 */
typedef func_rand_info (*get_rand_info)(void *handle, uint64_t addr);

/*
 * Rewrite the stack according to randomization information generated by
 * chameleon.
 *
 * @param cham_handle opaque handle providied chameleon
 * @param info_func callback used to gather randomization information
 * @param handle a stack transformation handle which has transformation
 *               metadata for the source binary
 * @param is_return true if transforming at a return instruction
 * @param regset_src a pointer to a filled register set representing the
 *                   thread's state
 * @param sp_src_base source stack base in child's address space, i.e., highest
 *                    stack address
 * @param sp_src_buf source stack base of buffer in Chameleon's address space
 * @param regset_dest a pointer to a register set to be filled with destination
 *                    thread's state
 * @param sp_dest_base destination stack base in child's address space, i.e.,
 *                     highest stack address (will fill downwards with
 *                     activation records)
 * @param sp_dest_buf destination stack base of buffer in Chameleon's address
 *                    space
 * @return 0 if the stack was successfully rewritten, 1 otherwise
 */
int st_rewrite_randomized(void *cham_handle,
                          get_rand_info info_func,
                          st_handle handle,
                          int is_return,
                          void* regset_src,
                          void* sp_src_base,
                          void* sp_src_buf,
                          void* regset_dest,
                          void* sp_dest_base,
                          void *sp_dest_buf);

/*
 * Dump the child's stack.
 *
 * @param cham_handle opaque handle providied chameleon
 * @param info_func callback used to gather randomization information
 * @param handle a stack transformation handle which has transformation
 *               metadata for the source binary
 * @param regset a pointer to a filled register set representing the thread's
 *               state
 * @param sp_base stack base in child's address space, i.e., highest stack
 *                address
 * @param sp_buf stack base of buffer in Chameleon's address space
 */
void st_dump_stack(void *cham_handle,
                   get_rand_info info_func,
                   st_handle handle,
                   void *regset,
                   void *sp_base,
                   void *sp_buf);

#else /* CHAMELEON */

/*
 * Rewrite the stack from user-space.
 *
 * Note: specific to Popcorn Compiler/the migration wrapper.
 *
 * @param sp the current stack pointer
 * @param src_arch the source ISA
 * @param src_regs the current register set
 * @param dest_arch the destination ISA
 * @param dest_regs the transformed destination register set
 * @return 0 if the stack was successfully re-written, 1 otherwise
 */
int st_userspace_rewrite(void* sp,
                         enum arch src_arch,
                         void* src_regs,
                         enum arch dest_arch,
                         void* dest_regs);

#endif /* CHAMELEON */

/*
 * Rewrite the stack in its entirety from its current form (source) to the
 * requested form (destination).
 *
 * @param src a stack transformation handle which has transformation metadata
 *            for the source binary
 * @param regset_src a pointer to a filled register set representing the
 *                   thread's state
 * @param sp_base_src source stack base, i.e., highest stack address
 * @param dest a stack transformation handle which has transformation metadata
 *             for the destination binary
 * @param regset_dest a pointer to a register set to be filled with destination
 *                    thread's state
 * @param sp_base_dest destination stack base, i.e., highest stack address
 *                     (will fill downwards with activation records)
 * @return 0 if succesful, or 1 otherwise
 */
int st_rewrite_stack(st_handle src,
                     void* regset_src,
                     void* sp_base_src,
                     st_handle dest,
                     void* regset_dest,
                     void* sp_base_dest);

/*
 * Rewrite only the top frame of the stack.  Previous frames will be
 * re-written on-demand as the thread unwinds the call stack.
 *
 * @param src a stack transformation handle which has transformation metadata
 *            for the source binary
 * @param regset_src a pointer to a filled register set representing the
 *                   thread's state
 * @param sp_base_src source stack base, i.e., highest stack address
 * @param dest a stack transformation handle which has transformation metadata
 *             for the destination binary
 * @param regset_dest a pointer to a register set to be filled with destination
 *                    thread's state
 * @param sp_base_dest destination stack base, i.e., highest stack address
 *                     (will fill downwards with activation records)
 * @return 0 if succesful, or 1 otherwise
 */
// TODO not yet implemented
int st_rewrite_ondemand(st_handle src,
                        void* regset_src,
                        void* sp_base_src,
                        st_handle dest,
                        void* regset_dest,
                        void* sp_base_dest);

/*
 * Return the current thread's stack bounds.
 *
 * @return this thread's stack bounds information
 */
stack_bounds get_stack_bounds();

#ifdef __cplusplus
}
#endif

#endif /* _ST_H */

