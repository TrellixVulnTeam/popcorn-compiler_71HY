/*
 * Architecture-specific timer implementations.  We don't want to eat the cost
 * of (potentially) expensive timing functions (e.g., clock_gettime()) if the
 * ISA provides a userland-readable timer facility, since we're observing
 * fine-grained timespans.
 *
 * Each architecture implements the following:
 *   TIMESTAMP( ts )              : take an architecture-specific timestamp
 *   TIMESTAMP_DIFF( start, end ) : return the difference of two timestamps,
 *                                  in nanoseconds
 *
 * Timestamps generated by these macros can be stored in unsigned long long
 * integers, but have architecture-specific representations.  The difference
 * between two timestamps is in nanoseconds, and is also stored in an unsigned
 * long long integer.
 */

#ifndef _TIMER_H
#define _TIMER_H

#ifdef __aarch64__
# include <arch/aarch64/timer.h>
#elif defined __powerpc64__
# include <arch/powerpc64/timer.h>
#elif defined __x86_64__
# include <arch/x86_64/timer.h>
#else

/* Fall back to libc timer implementation. */
#include <time.h>
#define TIMESTAMP( ts ) \
    ({ \
      struct timespec stamp; \
      clock_gettime(CLOCK_MONOTONIC, &stamp); \
      ts = (stamp.tv_sec * 1000000000) + stamp.tv_nsec; \
    })
#define TIMESTAMP_DIFF( start, end ) (end - start)

#endif

#endif /* _TIMER_H */

