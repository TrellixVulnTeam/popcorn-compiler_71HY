diff -ur /home/elfmaster/git/build/src/binutils-2.32/gold/errors.h gold/errors.h
--- /home/elfmaster/git/build/src/binutils-2.32/gold/errors.h	2021-03-26 00:07:46.542411166 -0700
+++ gold/errors.h	2019-01-19 08:01:33.000000000 -0800
@@ -24,7 +24,6 @@
 #define GOLD_ERRORS_H
 
 #include <cstdarg>
-#include <string>
 
 #include "gold-threads.h"
 
diff -ur /home/elfmaster/git/build/src/binutils-2.32/gold/gold.cc gold/gold.cc
--- /home/elfmaster/git/build/src/binutils-2.32/gold/gold.cc	2019-01-19 08:01:33.000000000 -0800
+++ gold/gold.cc	2021-03-28 20:41:29.269962140 -0700
@@ -610,9 +610,9 @@
   if (!doing_static_link && options.is_static())
     {
       // We print out just the first .so we see; there may be others.
-      gold_assert(input_objects->dynobj_begin() != input_objects->dynobj_end());
-      gold_error(_("cannot mix -static with dynamic object %s"),
-		 (*input_objects->dynobj_begin())->name().c_str());
+      //gold_assert(input_objects->dynobj_begin() != input_objects->dynobj_end());
+     // gold_error(_("cannot mix -static with dynamic object %s"),
+	//	 (*input_objects->dynobj_begin())->name().c_str());
     }
   if (!doing_static_link && parameters->options().relocatable())
     gold_fatal(_("cannot mix -r with dynamic object %s"),
diff -ur /home/elfmaster/git/build/src/binutils-2.32/gold/mapfile.cc gold/mapfile.cc
--- /home/elfmaster/git/build/src/binutils-2.32/gold/mapfile.cc	2021-03-26 00:07:46.542411166 -0700
+++ gold/mapfile.cc	2019-01-19 08:01:33.000000000 -0800
@@ -264,10 +264,9 @@
   snprintf(sizebuf, sizeof sizebuf, "0x%llx",
 	   static_cast<unsigned long long>(size));
 
-  fprintf(this->map_file_, "0x%0*llx %10s 0x%lx %s\n",
+  fprintf(this->map_file_, "0x%0*llx %10s %s\n",
 	  parameters->target().get_size() / 4,
 	  static_cast<unsigned long long>(addr), sizebuf,
-	  (unsigned long) relobj->section_addralign(shndx),
 	  relobj->name().c_str());
 
   if (os != NULL)
diff -ur /home/elfmaster/git/build/src/binutils-2.32/gold/options.cc gold/options.cc
--- /home/elfmaster/git/build/src/binutils-2.32/gold/options.cc	2019-01-19 08:01:33.000000000 -0800
+++ gold/options.cc	2021-03-28 12:26:38.372870844 -0700
@@ -1291,13 +1291,14 @@
   this->add_sysroot();
 
   // Now that we've normalized the options, check for contradictory ones.
+#if 0
   if (this->shared() && this->is_static())
     gold_fatal(_("-shared and -static are incompatible"));
   if (this->shared() && this->pie())
     gold_fatal(_("-shared and -pie are incompatible"));
   if (this->pie() && this->is_static())
     gold_fatal(_("-pie and -static are incompatible"));
-
+#endif
   if (this->shared() && this->relocatable())
     gold_fatal(_("-shared and -r are incompatible"));
   if (this->pie() && this->relocatable())
diff -ur /home/elfmaster/git/build/src/binutils-2.32/gold/x86_64.cc gold/x86_64.cc
--- /home/elfmaster/git/build/src/binutils-2.32/gold/x86_64.cc	2021-03-26 00:07:46.542411166 -0700
+++ gold/x86_64.cc	2019-01-19 08:01:33.000000000 -0800
@@ -695,14 +695,6 @@
 class Target_x86_64 : public Sized_target<size, false>
 {
  public:
-  // Popcorn: TLS starts at the end of the thread descriptor.  musl-libc's
-  // pthread descriptor size is 288 bytes.
-  const static int TCB_SIZE = size / 8 * 2; // Match aarch64
-  const static int MUSL_PTHREAD_SIZE = 288;
-  unsigned int tcb_size() const { return Target_x86_64<size>::TCB_SIZE; }
-  unsigned int pthread_size() const
-  { return Target_x86_64<size>::MUSL_PTHREAD_SIZE; }
-
   // In the x86_64 ABI (p 68), it says "The AMD64 ABI architectures
   // uses only Elf64_Rela relocation entries with explicit addends."
   typedef Output_data_reloc<elfcpp::SHT_RELA, true, size, false> Reloc_section;
@@ -5240,14 +5232,7 @@
 			  || issue_undefined_symbol_error(gsym));
 	      return;
 	    }
-	  // Popcorn: create a uniform TLS layout which places TLS *above* the
-	  // thread pointer (rather than below like normal x86-64).
-	  typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-	      align_address(target->tcb_size(),
-			    tls_segment->maximum_alignment());
-	  value += aligned_tcb_size +
-		   target->pthread_size() -
-		   target->tcb_size();
+	  value -= tls_segment->memsz();
 	}
       Relocate_functions<size, false>::rela32(view, value, addend);
       break;
@@ -5262,14 +5247,7 @@
 			  || issue_undefined_symbol_error(gsym));
 	      return;
 	    }
-	  // Popcorn: create a uniform TLS layout which places TLS *above* the
-	  // thread pointer (rather than below like normal x86-64).
-	  typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-	      align_address(target->tcb_size(),
-			    tls_segment->maximum_alignment());
-	  value += aligned_tcb_size +
-		   target->pthread_size() -
-		   target->tcb_size();
+	  value -= tls_segment->memsz();
 	}
       Relocate_functions<size, false>::rela64(view, value, addend);
       break;
@@ -5335,11 +5313,7 @@
 		      || issue_undefined_symbol_error(gsym));
 	  return;
 	}
-      // Popcorn: create a uniform TLS layout which places TLS *above* the
-      // thread pointer (rather than below like normal x86-64).
-      typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-          align_address(target->tcb_size(), tls_segment->maximum_alignment());
-      value += aligned_tcb_size + target->pthread_size() - target->tcb_size();
+      value -= tls_segment->memsz();
       Relocate_functions<size, false>::rela32(view, value, addend);
       break;
     }
@@ -5463,16 +5437,7 @@
 	     15);
     }
 
-  // Popcorn: create a uniform TLS layout which places TLS *above* the
-  // thread pointer (rather than below like normal x86-64).
-  // TODO if we support different thread descriptor sizes then the target
-  // (which defines which libc we're supporting) must be passed in here
-  typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-      align_address(Target_x86_64<size>::TCB_SIZE,
-		    tls_segment->maximum_alignment());
-  value += aligned_tcb_size +
-	   Target_x86_64<size>::MUSL_PTHREAD_SIZE -
-	   Target_x86_64<size>::TCB_SIZE;
+  value -= tls_segment->memsz();
   Relocate_functions<size, false>::rela32(view + 8, value, 0);
 
   // The next reloc should be a PLT32 reloc against __tls_get_addr.
@@ -5543,16 +5508,7 @@
 		     view[-3] == 0x48 && view[-2] == 0x8d && view[-1] == 0x05);
       view[-2] = 0xc7;
       view[-1] = 0xc0;
-      // Popcorn: create a uniform TLS layout which places TLS *above* the
-      // thread pointer (rather than below like normal x86-64).
-      // TODO if we support different thread descriptor sizes then the target
-      // (which defines which libc we're supporting) must be passed in here
-      typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-	  align_address(Target_x86_64<size>::TCB_SIZE,
-			tls_segment->maximum_alignment());
-      value += aligned_tcb_size +
-	       Target_x86_64<size>::MUSL_PTHREAD_SIZE -
-	       Target_x86_64<size>::TCB_SIZE;
+      value -= tls_segment->memsz();
       Relocate_functions<size, false>::rela32(view, value, 0);
     }
   else
@@ -5687,18 +5643,7 @@
     }
 
   if (tls_segment != NULL)
-    {
-      // Popcorn: create a uniform TLS layout which places TLS *above* the
-      // thread pointer (rather than below like normal x86-64).
-      // TODO if we support different thread descriptor sizes then the target
-      // (which defines which libc we're supporting) must be passed in here
-      typename elfcpp::Elf_types<size>::Elf_Addr aligned_tcb_size =
-	  align_address(Target_x86_64<size>::TCB_SIZE,
-			tls_segment->maximum_alignment());
-      value += aligned_tcb_size +
-	       Target_x86_64<size>::MUSL_PTHREAD_SIZE -
-	       Target_x86_64<size>::TCB_SIZE;
-    }
+    value -= tls_segment->memsz();
   Relocate_functions<size, false>::rela32(view, value, 0);
 }
 
