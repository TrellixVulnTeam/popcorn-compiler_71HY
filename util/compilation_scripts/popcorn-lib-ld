#!/bin/bash
set -e
#set -x

#echo $0: called with "$*"

POPCORN=/usr/local/popcorn
LD="$POPCORN/bin/ld.gold"
ALIGN=$POPCORN/bin/pyalign
POST_PROCESS=$POPCORN/bin/gen-stackinfo
X86_64_POPCORN="$POPCORN/x86_64"
ARM64_POPCORN="$POPCORN/aarch64"



#CFLAGS
CFLAGS="-nostdinc" 

###LDFLAGS
LIBS="/lib/crt1.o /lib/libc.a /lib/libmigrate.a /lib/libstack-transform.a 
	/lib/libelf.a  /lib/libpthread.a  /lib/libc.a  /lib/libm.a"
X86_64_LIBS=
ARM64_LIBS=
for lib in $LIBS; do
	X86_64_LIBS+="$X86_64_POPCORN/$lib "
	ARM64_LIBS+="$ARM64_POPCORN/$lib "
done
LIBGCC="--start-group -lgcc -lgcc_eh --end-group"
ARM64_LIBGCC=$(dirname $(aarch64-linux-gnu-gcc -print-libgcc-file-name))

LDFLAGS="-z relro --hash-style=gnu --build-id -static"
X86_64_LDFLAGS="$LDFLAGS -m elf_x86_64 -L$X86_64_POPCORN/lib $X86_64_LIBS --start-group --end-group"
ARM64_LDFLAGS="$LDFLAGS -m aarch64linux -L$ARM64_POPCORN/lib -L$ARM64_LIBGCC $ARM64_LIBS $LIBGCC"


#filter options
options=()  # the buffer array for the parameters
eoo=0       # end of options reached
OBJS=()
PRINT_VERSION=0

#filter "-o" options and "*.o" files
while [[ $1 ]]
do
    if ! ((eoo)); then
	case "$1" in
	  -o)
	      BIN=$2
	      #echo found -o is: $BIN
	      shift
	      shift
	      ;;
	  --version|-v|-V)
	      PRINT_VERSION=1
	      shift
	      ;;
	  -L*)
	      #skip: refuse all -L options!?
	      #this is necesary since clang add default libraries even
	      #when compiled wiht -nostdlib option! The fix should be
	      #there not here. We should allow the user to add custom
	      #librarie
	      shift
		;;
	  *lib*)
	      #skip
	      shift
		;;
	  *.o)
	      OBJS+=("$1")
	      shift
	      ;;
	  *gcc*)
	      #skip
	      shift
	      ;;
	  --)
	      eoo=1
	      options+=("$1")
		#echo "--$options"
	      shift
	      ;;
	  *)
	      options+=("$1")
		#echo "*$options"
	      shift
	      ;;
	esac
    else
	options+=("$1")
		#echo "else$options"
	# Another (worse) way of doing the same thing:
	# options=("${options[@]}" "$1")
	shift
    fi
done
	
if [ $PRINT_VERSION = "1" ]; then	
	$LD --version $*
	exit
fi

#echo OPTIONS: ${options[@]}
#echo OBJS: $OBJS

ARM64_OBJ=$OBJS #arms obj have no extension
X86_64_OBJ="${OBJS//.o/_x86_64.o}"
#ARGS_WO_OBJS=$(echo $ARGS | sed -n "s/[a-zA-Z0-9]*.o//gp") # The filter is better?

BIN_X86="$BIN"_X86
BIN_ARM="$BIN"_ARM
BIN_X86_VANILLA="$BIN_X86"_VANILLA
BIN_ARM_VANILLA="$BIN_ARM"_VANILLA

ARM64_MAP=arm64_map.txt
X86_64_MAP=x86_64_map.txt

#### Create the maps and the vanilla binaries
#$(LD) -o $@ $(ARM64_OBJ) $(LDFLAGS) $(ARM64_LDFLAGS) -Map $(ARM64_MAP)
$LD -o $BIN_ARM_VANILLA $ARM64_OBJ $options $ARM64_LDFLAGS -Map $ARM64_MAP
exit
#@$(LD) -o $@ $(X86_64_OBJ) $(LDFLAGS) $(X86_64_LDFLAGS) -Map $(X86_64_MAP)
$LD -o $BIN_X86_VANILLA $X86_64_OBJ $options $X86_64_LDFLAGS -Map $X86_64_MAP

ARM64_LD_SCRIPT="$BIN"_arm_ldscript
X86_64_LD_SCRIPT="$BIN"_x86_ldscript
### Input = maps; Output = LDSCRIPTS
$ALIGN --x86-bin $BIN_X86_VANILLA --arm-bin $BIN_ARM_VANILLA \
		--x86-map $X86_64_MAP --arm-map $ARM64_MAP \
		--output-x86-ls $X86_64_LD_SCRIPT --output-arm-ls $ARM64_LD_SCRIPT

ARM64_ALIGNED_MAP=arm64_aligned_map.txt
X86_64_ALIGNED_MAP=x86_64_aligned_map.txt
### Input = LDSCRIPTS; Output = the pre-final binaries 
#@$(LD) -o $@ $(ARM64_OBJ) $(LDFLAGS) $(ARM64_LDFLAGS) -Map $(ARM64_ALIGNED_MAP) -T $<
$LD -o $BIN_ARM $ARM64_OBJ $options $ARM64_LDFLAGS -Map $ARM64_ALIGNED_MAP -T $ARM64_LD_SCRIPT
#@$(LD) -o $@ $(X86_64_OBJ) $(LDFLAGS) $(X86_64_LDFLAGS) -Map $(X86_64_ALIGNED_MAP) -T $<
$LD -o $BIN_X86 $X86_64_OBJ $options $X86_64_LDFLAGS -Map $X86_64_ALIGNED_MAP -T $X86_64_LD_SCRIPT

#TODO: check aligned maps?

### Pre-finale binaries =>(post-process)=> final binaries
#@$(POST_PROCESS) -f $(ARM64_ALIGNED)
#@$(POST_PROCESS) -f $(X86_64_ALIGNED)
$POST_PROCESS -f $BIN_ARM
$POST_PROCESS -f $BIN_X86

## COPY the BIN_X86 version to BIN (TODO: do the same for arm? using scp?)
cp $BIN_X86 $BIN
